{
  "address": "0xe2f340bFFB804dd87D2A2419447647eF53FB84cb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_redeem",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_burn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bond",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "bac",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfPool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfWant",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bas",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bond",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "burn",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dai",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHarvestable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "harvesters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepBAS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keepBASMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceDevFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceDevMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceTreasuryMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "revokeHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_burn",
          "type": "address"
        }
      ],
      "name": "setBurn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_keepBAS",
          "type": "uint256"
        }
      ],
      "name": "setKeepBAS",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceDevFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceDevFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceTreasuryFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        }
      ],
      "name": "setStrategist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_timelock",
          "type": "address"
        }
      ],
      "name": "setTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalDevFundFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalDevFundFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_withdrawalTreasuryFee",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalTreasuryFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking_pool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sushiRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timelock",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "univ2Router2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_harvester",
          "type": "address"
        }
      ],
      "name": "whitelistHarvester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawForSwap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalDevFundFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalDevFundMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalTreasuryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalTreasuryMax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a10c2affc931caba4cd777a91ef1246be3f8c3f530ec4be723788fd569c9532",
  "receipt": {
    "to": null,
    "from": "0x7F994FbfB038Fa8ED5CaaB0D2B9d575Fc262D90e",
    "contractAddress": "0xe2f340bFFB804dd87D2A2419447647eF53FB84cb",
    "transactionIndex": 0,
    "gasUsed": "3010057",
    "logsBloom": "0x
    "blockHash": "0x53eb0e39e6cd974607d16e3200ce0278df38bcd1518618fd3b75b66613171fed",
    "transactionHash": "0x1a10c2affc931caba4cd777a91ef1246be3f8c3f530ec4be723788fd569c9532",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 13255970,
        "transactionHash": "0x1a10c2affc931caba4cd777a91ef1246be3f8c3f530ec4be723788fd569c9532",
        "address": "0x6B175474E89094C44Da98b954EedeAC495271d0F",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e2f340bffb804dd87d2a2419447647ef53fb84cb",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x53eb0e39e6cd974607d16e3200ce0278df38bcd1518618fd3b75b66613171fed"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 13255970,
        "transactionHash": "0x1a10c2affc931caba4cd777a91ef1246be3f8c3f530ec4be723788fd569c9532",
        "address": "0x106538CC16F938776c7c180186975BCA23875287",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e2f340bffb804dd87d2a2419447647ef53fb84cb",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x53eb0e39e6cd974607d16e3200ce0278df38bcd1518618fd3b75b66613171fed"
      }
    ],
    "blockNumber": 13255970,
    "cumulativeGasUsed": "3010057",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68c3a95b35c45db5db67ed83c43305052fad6e04",
    "0x68c3a95b35c45db5db67ed83c43305052fad6e04",
    "0x80e22d271de6097c9a0296f03767e729bb8da007",
    "0x68c3a95b35c45db5db67ed83c43305052fad6e04",
    "0xCc18b67AB02Ea402E4A9f4702523E8623e3C3a80",
    "0xCc18b67AB02Ea402E4A9f4702523E8623e3C3a80",
    "0xC36824905dfF2eAAEE7EcC09fCC63abc0af5Abc5"
  ],
  "solcInputHash": "43390728b465b231ad73d91fc9109659",
  "metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_redeem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_burn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bond\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"bac\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfWant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bas\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHarvestable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"harvesters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepBAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keepBASMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceDevMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"revokeHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burn\",\"type\":\"address\"}],\"name\":\"setBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_keepBAS\",\"type\":\"uint256\"}],\"name\":\"setKeepBAS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceDevFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceDevFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"}],\"name\":\"setStrategist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_timelock\",\"type\":\"address\"}],\"name\":\"setTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalDevFundFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalDevFundFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_withdrawalTreasuryFee\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalTreasuryFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking_pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sushiRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timelock\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"univ2Router2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_harvester\",\"type\":\"address\"}],\"name\":\"whitelistHarvester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawForSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalDevFundMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalTreasuryMax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/strategies/basis/strategy-basis-bac.sol\":\"StrategyBasisBac\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/interfaces/controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\ninterface IController {\\n    function vaults(address) external view returns (address);\\n\\n    function rewards() external view returns (address);\\n\\n    function devfund() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function withdraw(address, uint256) external;\\n\\n    function withdrawReward(address, uint256) external;\\n\\n    function earn(address, uint256) external;\\n\\n    function strategies(address) external view returns (address);\\n}\\n\",\"keccak256\":\"0x6eff217dbd8c3b0a8680163cc6c07765a558b5f09f151d81da323505b872ffaf\"},\"src/interfaces/redeem.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IRedeemPool {\\n    event RedeemStart(address indexed starter, uint256 reward);\\n    event DepositBond(address indexed owner, uint256 amount);\\n    event RewardClaimed(address indexed owner, uint256 amount);\\n    event ReCharge(\\n        address indexed owner,\\n        address indexed token,\\n        uint256 indexed rid,\\n        uint256 amount\\n    );\\n    event ReChargeETH(\\n        address indexed owner,\\n        uint256 indexed rid,\\n        uint256 amount\\n    );\\n    event Withdrawal(\\n        address indexed from,\\n        address indexed to,\\n        uint256 indexed at\\n    );\\n\\n    function rechargeCash(uint256 _rid, uint256 _amount) external;\\n    function cashToClaim() external view returns (uint256); \\n}\",\"keccak256\":\"0xe199ba1b6640baa902756ad3f2c058383ddf2dcf74b9eb3d829068020890dd8c\"},\"src/interfaces/staking-rewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface IStakingRewards {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getReward() external;\\n\\n    function stake(uint256 amount) external;\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferOperator(address newOperator_) external;\\n}\\n\",\"keccak256\":\"0x1d4179e32f103d3a6e8d3e33e787feed63c9f65d55c48b4e6ecf98e77cc0e477\"},\"src/interfaces/uniswapv2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.2;\\n\\ninterface UniswapRouterV2 {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint256\\n    );\\n\\n    function getPair(address tokenA, address tokenB)\\n        external\\n        view\\n        returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function createPair(address tokenA, address tokenB)\\n        external\\n        returns (address pair);\\n}\\n\",\"keccak256\":\"0xecabda62bf3746ff37adaf912a5f1b21e2a3f752b13498723ab9984962390eb2\"},\"src/lib/context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xdb26cbf4d028490f49831a7865c2fe1b28db44b535ca8d343785a3b768aae183\"},\"src/lib/erc20.sol\":{\"content\":\"\\n// File: contracts/GSN/Context.sol\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\nimport \\\"./safe-math.sol\\\";\\nimport \\\"./context.sol\\\";\\n\\n// File: contracts/token/ERC20/IERC20.sol\\n\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\n// File: contracts/utils/Address.sol\\n\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        return _functionCallWithValue(target, data, value, errorMessage);\\n    }\\n\\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n// File: contracts/token/ERC20/ERC20.sol\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name, string memory symbol) public {\\n        _name = name;\\n        _symbol = symbol;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20};\\n     *\\n     * Requirements:\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x1562211f7af07954b97278eb6f56548ba1b901e28fe4baa442a466bbf388226a\"},\"src/lib/safe-math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\",\"keccak256\":\"0x2e1df665169560627c2a0dce65572e63de974bb41c759cdeed973cd570b4d7cf\"},\"src/strategies/basis/strategy-basis-bac.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"../strategy-basis-farm-base.sol\\\";\\n\\ncontract StrategyBasisBac is StrategyBasisFarmBase {\\n    // Token addresses\\n    address public staking_pool = 0x190503cFbE97d77E83dedfC550C79EFd6E2E799f;\\n    address public bac = 0x3449FC1Cd036255BA1EB19d65fF4BA2b8903A69a;\\n\\n    constructor(\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock,\\n        address _redeem,\\n        address _burn,\\n        address _bond\\n    )\\n        public\\n        StrategyBasisFarmBase(\\n            bac,\\n            staking_pool,\\n            bac,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock,\\n            _redeem,\\n            _burn,\\n            _bond\\n        )\\n    { }\\n\\n    // **** Views ****\\n\\n    function getName() external override pure returns (string memory) {\\n        return \\\"StrategyBasisBac\\\";\\n    }\\n}\\n\",\"keccak256\":\"0xeb95356b10fcd0683034d1b9fd5898f2b12c0ca116a0168b982fa34d151a29c0\"},\"src/strategies/strategy-base.sol\":{\"content\":\"pragma solidity ^0.6.7;\\n\\nimport \\\"../lib/erc20.sol\\\";\\nimport \\\"../lib/safe-math.sol\\\";\\n\\nimport \\\"../interfaces/staking-rewards.sol\\\";\\nimport \\\"../interfaces/uniswapv2.sol\\\";\\nimport \\\"../interfaces/controller.sol\\\";\\nimport \\\"../interfaces/redeem.sol\\\";\\n\\n// Strategy Contract Basics\\n\\nabstract contract StrategyBase {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n    using SafeMath for uint112;\\n\\n    // Perfomance fees - start with 20%\\n    uint256 public performanceTreasuryFee = 2000;\\n    uint256 public constant performanceTreasuryMax = 10000;\\n\\n    uint256 public performanceDevFee = 0;\\n    uint256 public constant performanceDevMax = 10000;\\n\\n    // Withdrawal fee 0%\\n    // - 0% to treasury\\n    // - 0% to dev fund\\n    uint256 public withdrawalTreasuryFee = 0;\\n    uint256 public constant withdrawalTreasuryMax = 100000;\\n\\n    uint256 public withdrawalDevFundFee = 0;\\n    uint256 public constant withdrawalDevFundMax = 100000;\\n\\n    // Tokens\\n    address public want;\\n    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address public constant pair = 0xd4405F0704621DBe9d4dEA60E128E0C3b26bddbD;\\n\\n    // User accounts\\n    address public governance;\\n    address public controller;\\n    address public strategist;\\n    address public timelock;\\n\\n    address public redeem;\\n    address public bond;\\n    address public burn;\\n\\n    // Dex\\n    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    address public sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\\n\\n\\n    mapping(address => bool) public harvesters;\\n\\n    constructor(\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock,\\n        address _redeem,\\n        address _burn,\\n        address _bond\\n    ) public {\\n        require(_want != address(0));\\n        require(_governance != address(0));\\n        require(_strategist != address(0));\\n        require(_controller != address(0));\\n        require(_timelock != address(0));\\n\\n        want = _want;\\n        governance = _governance;\\n        strategist = _strategist;\\n        controller = _controller;\\n        timelock = _timelock;\\n        redeem = _redeem;\\n        burn = _burn;\\n        bond = _bond;\\n\\n    }\\n\\n    // **** Modifiers **** //\\n\\n    modifier onlyBenevolent {\\n        require(\\n            harvesters[msg.sender] ||\\n                msg.sender == governance ||\\n                msg.sender == strategist\\n        );\\n        _;\\n    }\\n\\n    // **** Views **** //\\n\\n    function balanceOfWant() public view returns (uint256) {\\n        return IERC20(want).balanceOf(address(this));\\n    }\\n\\n    function balanceOfPool() public virtual view returns (uint256);\\n\\n    function balanceOf() public view returns (uint256) {\\n        return balanceOfWant().add(balanceOfPool());\\n    }\\n\\n    function getName() external virtual pure returns (string memory);\\n\\n    // **** Setters **** //\\n\\n    function whitelistHarvester(address _harvester) external {\\n        require(msg.sender == governance ||\\n             msg.sender == strategist, \\\"not authorized\\\");\\n        harvesters[_harvester] = true;\\n    }\\n\\n    function revokeHarvester(address _harvester) external {\\n        require(msg.sender == governance ||\\n             msg.sender == strategist, \\\"not authorized\\\");\\n        harvesters[_harvester] = false;\\n    }\\n\\n    function setWithdrawalDevFundFee(uint256 _withdrawalDevFundFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalDevFundFee = _withdrawalDevFundFee;\\n    }\\n\\n    function setWithdrawalTreasuryFee(uint256 _withdrawalTreasuryFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        withdrawalTreasuryFee = _withdrawalTreasuryFee;\\n    }\\n\\n    function setPerformanceDevFee(uint256 _performanceDevFee) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceDevFee = _performanceDevFee;\\n    }\\n\\n    function setPerformanceTreasuryFee(uint256 _performanceTreasuryFee)\\n        external\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        performanceTreasuryFee = _performanceTreasuryFee;\\n    }\\n\\n    function setStrategist(address _strategist) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        strategist = _strategist;\\n    }\\n\\n    function setGovernance(address _governance) external {\\n        require(msg.sender == governance, \\\"!governance\\\");\\n        governance = _governance;\\n    }\\n\\n    function setTimelock(address _timelock) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        timelock = _timelock;\\n    }\\n\\n    function setController(address _controller) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        controller = _controller;\\n    }\\n\\n    function setBurn(address _burn) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        burn = _burn;\\n    }\\n\\n    // **** State mutations **** //\\n    function deposit() public virtual;\\n\\n    // Controller only function for creating additional rewards from dust\\n    function withdraw(IERC20 _asset) external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        require(want != address(_asset), \\\"want\\\");\\n        balance = _asset.balanceOf(address(this));\\n        _asset.safeTransfer(controller, balance);\\n    }\\n\\n    function withdraw(uint256 _amount) external {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        uint256 _balance = IERC20(want).balanceOf(address(this));\\n        if (_balance < _amount) {\\n            _amount = _withdrawSome(_amount.sub(_balance));\\n            _amount = _amount.add(_balance);\\n        }\\n\\n        uint256 _feeDev = _amount.mul(withdrawalDevFundFee).div(\\n            withdrawalDevFundMax\\n        );\\n        IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\\n\\n        uint256 _feeTreasury = _amount.mul(withdrawalTreasuryFee).div(\\n            withdrawalTreasuryMax\\n        );\\n        IERC20(want).safeTransfer(\\n            IController(controller).treasury(),\\n            _feeTreasury\\n        );\\n\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n\\n        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\\n    }\\n\\n    // Withdraw funds, used to swap between strategies\\n    function withdrawForSwap(uint256 _amount)\\n        external\\n        returns (uint256 balance)\\n    {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawSome(_amount);\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\");\\n        IERC20(want).safeTransfer(_vault, balance);\\n    }\\n\\n    // Withdraw all funds, normally used when migrating strategies\\n    function withdrawAll() external returns (uint256 balance) {\\n        require(msg.sender == controller, \\\"!controller\\\");\\n        _withdrawAll();\\n\\n        balance = IERC20(want).balanceOf(address(this));\\n\\n        address _vault = IController(controller).vaults(address(want));\\n        require(_vault != address(0), \\\"!vault\\\"); // additional protection so we don't burn the funds\\n        IERC20(want).safeTransfer(_vault, balance);\\n    }\\n\\n    function _withdrawAll() internal {\\n        _withdrawSome(balanceOfPool());\\n    }\\n\\n    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\\n\\n    function harvest() public virtual;\\n\\n    // **** Emergency functions ****\\n\\n    function execute(address _target, bytes memory _data)\\n        public\\n        payable\\n        returns (bytes memory response)\\n    {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        require(_target != address(0), \\\"!target\\\");\\n\\n        // call contract in current context\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _target,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            response := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(response, size)\\n            returndatacopy(add(response, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    // throw if delegatecall failed\\n                    revert(add(response, 0x20), size)\\n                }\\n        }\\n    }\\n\\n    // **** Internal functions ****\\n    function _swapUniswap(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal {\\n        require(_to != address(0));\\n\\n        address[] memory path;\\n\\n        if (_from == weth || _to == weth) {\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = weth;\\n            path[2] = _to;\\n        }\\n\\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _swapUniswapWithPath(\\n        address[] memory path,\\n        uint256 _amount\\n    ) internal {\\n        require(path[1] != address(0));\\n\\n        UniswapRouterV2(univ2Router2).swapExactTokensForTokens(\\n            _amount,\\n            0,\\n            path,\\n            address(this),\\n            now.add(60)\\n        );\\n    }\\n\\n    function _bacPrice() internal view returns (uint256) {\\n        (uint112 r1, uint112 r2, ) = IUniswapV2Pair(pair).getReserves();\\n        return r2.mul(1e18).div(r1);\\n    }\\n\\n    function redeemFee() public view returns (uint256) {\\n        uint256 bacPrice = _bacPrice();\\n        if (bacPrice > 1e18) {\\n            return 0;\\n        }\\n        if (IERC20(want).balanceOf(redeem).sub(IRedeemPool(redeem).cashToClaim()) > IERC20(bond).totalSupply().sub(IERC20(bond).balanceOf(burn))) {\\n            return 0;\\n        }\\n        return uint256(1e18).sub(bacPrice).mul(3).div(10);\\n    }\\n\\n    function _distributePerformanceFeesAndDeposit() internal {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n\\n        if (_want > 0) {\\n            // Treasury fees\\n            IERC20(want).safeTransfer(\\n                IController(controller).treasury(),\\n                _want.mul(performanceTreasuryFee).div(performanceTreasuryMax)\\n            );\\n\\n            // Performance fee\\n            IERC20(want).safeTransfer(\\n                IController(controller).devfund(),\\n                _want.mul(performanceDevFee).div(performanceDevMax)\\n            );\\n\\n            // redeem fee\\n            IERC20(want).approve(redeem, _want.mul(redeemFee()));\\n            IRedeemPool(redeem).rechargeCash(1, _want.mul(redeemFee()));\\n\\n            deposit();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc417dc5a1d618761bb2e5aaaf095d886e9f45ea1470730939feae67093094366\"},\"src/strategies/strategy-basis-farm-base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.6.7;\\n\\nimport \\\"./strategy-staking-rewards-base.sol\\\";\\n\\nabstract contract StrategyBasisFarmBase is StrategyStakingRewardsBase {\\n    // Token addresses\\n    address public bas = 0x106538CC16F938776c7c180186975BCA23875287; //bas v2 share token\\n    address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    // DAI/<token1> pair\\n    address public token1;\\n    \\n    // How much BAS tokens to keep?\\n    uint256 public keepBAS = 0;\\n    uint256 public constant keepBASMax = 10000;\\n\\n    constructor(\\n        address _token1,\\n        address _rewards,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock,\\n        address _redeem,\\n        address _burn,\\n        address _bond\\n    )\\n        public\\n        StrategyStakingRewardsBase(\\n            _rewards,\\n            _want,\\n            _governance,\\n            _strategist,\\n            _controller,\\n            _timelock,\\n            _redeem,\\n            _burn,\\n            _bond\\n        )\\n    {\\n        token1 = _token1;\\n        IERC20(dai).approve(univ2Router2, uint(-1));\\n        IERC20(bas).approve(univ2Router2, uint(-1));\\n    }\\n\\n    // **** Setters ****\\n\\n    function setKeepBAS(uint256 _keepBAS) external {\\n        require(msg.sender == timelock, \\\"!timelock\\\");\\n        keepBAS = _keepBAS;\\n    }\\n\\n    // **** State Mutations ****\\n\\n    function harvest() public override onlyBenevolent {\\n        address[] memory path = new address[](3);\\n        // Collects BAS tokens\\n        IStakingRewards(rewards).getReward();\\n        uint256 _bas = IERC20(bas).balanceOf(address(this));\\n        if (_bas > 0) {\\n            // 10% is locked up for future gov\\n            uint256 _keepBAS = _bas.mul(keepBAS).div(keepBASMax);\\n            IERC20(bas).safeTransfer(\\n                IController(controller).treasury(),\\n                _keepBAS\\n            );\\n            path[0] = bas;\\n            path[1] = dai;\\n            path[2] = token1;\\n            _swapUniswapWithPath(path, _bas.sub(_keepBAS));\\n        }\\n\\n        // We want to get back Bac tokens\\n        _distributePerformanceFeesAndDeposit();\\n    }\\n}\\n\",\"keccak256\":\"0xa0632a91cbc14ebe7fe870f2462632c250831e445df116caf5fdb60426cd5611\"},\"src/strategies/strategy-staking-rewards-base.sol\":{\"content\":\"pragma solidity ^0.6.7;\\n\\nimport \\\"./strategy-base.sol\\\";\\n\\n// Base contract for SNX Staking rewards contract interfaces\\n\\nabstract contract StrategyStakingRewardsBase is StrategyBase {\\n    address public rewards;\\n\\n    // **** Getters ****\\n    constructor(\\n        address _rewards,\\n        address _want,\\n        address _governance,\\n        address _strategist,\\n        address _controller,\\n        address _timelock,\\n        address _redeem,\\n        address _burn,\\n        address _bond\\n    )\\n        public\\n        StrategyBase(_want, _governance, _strategist, _controller, _timelock, _redeem, _burn, _bond)\\n    {\\n        rewards = _rewards;\\n    }\\n\\n    function balanceOfPool() public override view returns (uint256) {\\n        return IStakingRewards(rewards).balanceOf(address(this));\\n    }\\n\\n    function getHarvestable() external view returns (uint256) {\\n        return IStakingRewards(rewards).earned(address(this));\\n    }\\n\\n    // **** Setters ****\\n\\n    function deposit() public override {\\n        uint256 _want = IERC20(want).balanceOf(address(this));\\n        if (_want > 0) {\\n            IERC20(want).safeApprove(rewards, 0);\\n            IERC20(want).safeApprove(rewards, _want);\\n            IStakingRewards(rewards).stake(_want);\\n        }\\n    }\\n\\n    function _withdrawSome(uint256 _amount)\\n        internal\\n        override\\n        returns (uint256)\\n    {\\n        IStakingRewards(rewards).withdraw(_amount);\\n        return _amount;\\n    }\\n}\\n\",\"keccak256\":\"0xf87f709095a87471bac4e85339f6dff80cf08ffba2dcf7bb335c5de3c1bf7496\"}},\"version\":1}",
  "bytecode": "0x60806040526107d06000908155600181905560028190556003819055600c80546001600160a01b0319908116737a250d5630b4cf539739df2c5dacb4c659f2488d17909155600d8054821673d9e1ce17f2641f24ae83637ab66a2cca9c378b9f17905560108054821673106538cc16f938776c7c180186975bca23875287179055601180548216736b175474e89094c44da98b954eedeac495271d0f17905560139190915560148054821673190503cfbe97d77e83dedfc550c79efd6e2e799f17905560158054909116733449fc1cd036255ba1eb19d65ff4ba2b8903a69a179055348015620000ee57600080fd5b50604051620031e3380380620031e3833981810160405260e08110156200011457600080fd5b508051602082015160408301516060840151608085015160a086015160c09096015160155460145496979596949593949293926001600160a01b03918216911681898989898989898888888888888888888787878787878787876200017857600080fd5b6001600160a01b0387166200018c57600080fd5b6001600160a01b038616620001a057600080fd5b6001600160a01b038516620001b457600080fd5b6001600160a01b038416620001c857600080fd5b87600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600560006101000a8154816001600160a01b0302191690836001600160a01b0316021790555085600760006101000a8154816001600160a01b0302191690836001600160a01b0316021790555084600660006101000a8154816001600160a01b0302191690836001600160a01b0316021790555083600860006101000a8154816001600160a01b0302191690836001600160a01b0316021790555082600960006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600b60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555080600a60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050505088600f60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555050505050505050505089601260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550601160009054906101000a90046001600160a01b03166001600160a01b031663095ea7b3600c60009054906101000a90046001600160a01b03166000196040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b158015620003ec57600080fd5b505af115801562000401573d6000803e3d6000fd5b505050506040513d60208110156200041857600080fd5b5050601054600c546040805163095ea7b360e01b81526001600160a01b03928316600482015260001960248201529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156200047557600080fd5b505af11580156200048a573d6000803e3d6000fd5b505050506040513d6020811015620004a157600080fd5b50505050505050505050505050505050505050612d1f80620004c46000396000f3fe6080604052600436106103355760003560e01c806382378594116101ab578063aced73bd116100f7578063c7b9d53011610095578063d33219b41161006f578063d33219b414610a25578063f4b9fa7514610a3a578063f77c479114610a4f578063fe1f8f7a1461061857610335565b8063c7b9d530146109c8578063d0e30db0146109fb578063d21220a714610a1057610335565b8063be040fb0116100d1578063be040fb01461094a578063c1a3d44c1461095f578063c6223e2614610974578063c65e32421461099e57610335565b8063aced73bd146108cf578063b9e3748914610902578063bdacb3031461091757610335565b806392eefe9b116101645780639ec5a8941161013e5780639ec5a89414610848578063a8aa1b311461085d578063ab033ea914610872578063ab73e433146108a557610335565b806392eefe9b146107d6578063965fa21e146108095780639b26a4841461081e57610335565b80638237859414610711578063853828b61461073b578063879765831461075057806388993f22146107975780638ccdbb70146107ac5780638ee624a9146107c157610335565b80633656b20b1161028557806351f3d0b8116102235780635aa6e675116101fd5780635aa6e675146106bd57806364c9ec6f146106d25780636d13582c146106e7578063722713f7146106fc57610335565b806351f3d0b81461066057806354df7b631461067557806359739ec4146106a857610335565b80634641257d1161025f5780634641257d14610603578063479119be146106185780634fe809cc1461058557806351cff8d91461062d57610335565b80633656b20b146105855780633fc8cef3146105d957806344df8e70146105ee57610335565b80631f1fcd51116102f257806325802756116102cc578063258027561461057057806326e886c6146105855780632e1a7d4d1461059a57806332ac1f27146105c457610335565b80631f1fcd51146105005780631fe4a68614610531578063249fb9b41461054657610335565b806304d152eb1461033a5780630547104d14610361578063115880861461037657806317d7de7c1461038b57806318eb0e0b146104155780631cff79cd1461044a575b600080fd5b34801561034657600080fd5b5061034f610a64565b60408051918252519081900360200190f35b34801561036d57600080fd5b5061034f610a6a565b34801561038257600080fd5b5061034f610ae5565b34801561039757600080fd5b506103a0610b30565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103da5781810151838201526020016103c2565b50505050905090810190601f1680156104075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042157600080fd5b506104486004803603602081101561043857600080fd5b50356001600160a01b0316610b5a565b005b6103a06004803603604081101561046057600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561048b57600080fd5b82018360208201111561049d57600080fd5b803590602001918460018302840111640100000000831117156104bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610be0945050505050565b34801561050c57600080fd5b50610515610cc3565b604080516001600160a01b039092168252519081900360200190f35b34801561053d57600080fd5b50610515610cd2565b34801561055257600080fd5b506104486004803603602081101561056957600080fd5b5035610ce1565b34801561057c57600080fd5b50610515610d31565b34801561059157600080fd5b5061034f610d40565b3480156105a657600080fd5b50610448600480360360208110156105bd57600080fd5b5035610d46565b3480156105d057600080fd5b50610515611083565b3480156105e557600080fd5b50610515611092565b3480156105fa57600080fd5b506105156110aa565b34801561060f57600080fd5b506104486110b9565b34801561062457600080fd5b5061034f611365565b34801561063957600080fd5b5061034f6004803603602081101561065057600080fd5b50356001600160a01b031661136c565b34801561066c57600080fd5b5061034f6114a2565b34801561068157600080fd5b506104486004803603602081101561069857600080fd5b50356001600160a01b03166114a8565b3480156106b457600080fd5b5061034f611531565b3480156106c957600080fd5b50610515611537565b3480156106de57600080fd5b50610515611546565b3480156106f357600080fd5b50610515611555565b34801561070857600080fd5b5061034f611564565b34801561071d57600080fd5b506104486004803603602081101561073457600080fd5b503561158a565b34801561074757600080fd5b5061034f6115da565b34801561075c57600080fd5b506107836004803603602081101561077357600080fd5b50356001600160a01b0316611794565b604080519115158252519081900360200190f35b3480156107a357600080fd5b5061034f6117a9565b3480156107b857600080fd5b5061034f6117af565b3480156107cd57600080fd5b506105156117b5565b3480156107e257600080fd5b50610448600480360360208110156107f957600080fd5b50356001600160a01b03166117c4565b34801561081557600080fd5b5061034f611831565b34801561082a57600080fd5b506104486004803603602081101561084157600080fd5b5035611a5c565b34801561085457600080fd5b50610515611aac565b34801561086957600080fd5b50610515611abb565b34801561087e57600080fd5b506104486004803603602081101561089557600080fd5b50356001600160a01b0316611ad3565b3480156108b157600080fd5b50610448600480360360208110156108c857600080fd5b5035611b42565b3480156108db57600080fd5b50610448600480360360208110156108f257600080fd5b50356001600160a01b0316611b92565b34801561090e57600080fd5b50610515611bff565b34801561092357600080fd5b506104486004803603602081101561093a57600080fd5b50356001600160a01b0316611c0e565b34801561095657600080fd5b50610515611c7b565b34801561096b57600080fd5b5061034f611c8a565b34801561098057600080fd5b5061034f6004803603602081101561099757600080fd5b5035611cd9565b3480156109aa57600080fd5b50610448600480360360208110156109c157600080fd5b5035611e97565b3480156109d457600080fd5b50610448600480360360208110156109eb57600080fd5b50356001600160a01b0316611ee7565b348015610a0757600080fd5b50610448611f56565b348015610a1c57600080fd5b50610515612084565b348015610a3157600080fd5b50610515612093565b348015610a4657600080fd5b506105156120a2565b348015610a5b57600080fd5b506105156120b1565b60135481565b600f54604080516246613160e11b815230600482015290516000926001600160a01b031691628cc262916024808301926020929190829003018186803b158015610ab357600080fd5b505afa158015610ac7573d6000803e3d6000fd5b505050506040513d6020811015610add57600080fd5b505190505b90565b600f54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ab357600080fd5b60408051808201909152601081526f5374726174656779426173697342616360801b602082015290565b6005546001600160a01b0316331480610b7d57506007546001600160a01b031633145b610bbf576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6001600160a01b03166000908152600e60205260409020805460ff19169055565b6008546060906001600160a01b03163314610c2e576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b6001600160a01b038316610c73576040805162461bcd60e51b8152602060048201526007602482015266085d185c99d95d60ca1b604482015290519081900360640190fd5b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018114610cb357610cba565b8160208501fd5b50505092915050565b6004546001600160a01b031681565b6007546001600160a01b031681565b6008546001600160a01b03163314610d2c576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600055565b6010546001600160a01b031681565b61271081565b6006546001600160a01b03163314610d93576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d6020811015610e0c57600080fd5b5051905081811015610e4557610e30610e2b838363ffffffff6120c016565b61210b565b9150610e42828263ffffffff61217516565b91505b6000610e6f620186a0610e63600354866121cf90919063ffffffff16565b9063ffffffff61222816565b9050610f07600660009054906101000a90046001600160a01b03166001600160a01b0316638d8f1e676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d6020811015610eec57600080fd5b50516004546001600160a01b0316908363ffffffff61226a16565b6000610f25620186a0610e63600254876121cf90919063ffffffff16565b9050610f78600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec257600080fd5b6006546004805460408051632988bb9f60e21b81526001600160a01b039283169381019390935251600093919091169163a622ee7c916024808301926020929190829003018186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d6020811015610ff757600080fd5b505190506001600160a01b03811661103f576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b61107c8161106384611057898863ffffffff6120c016565b9063ffffffff6120c016565b6004546001600160a01b0316919063ffffffff61226a16565b5050505050565b6015546001600160a01b031681565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b600b546001600160a01b031681565b336000908152600e602052604090205460ff16806110e157506005546001600160a01b031633145b806110f657506007546001600160a01b031633145b6110ff57600080fd5b604080516003808252608082019092526060916020820183803683375050600f5460408051631e8c5c8960e11b815290519394506001600160a01b0390911692633d18b9129250600480830192600092919082900301818387803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b5050601054604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d60208110156111f557600080fd5b50519050801561135957600061121c612710610e63601354856121cf90919063ffffffff16565b90506112b4600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561126f57600080fd5b505afa158015611283573d6000803e3d6000fd5b505050506040513d602081101561129957600080fd5b50516010546001600160a01b0316908363ffffffff61226a16565b60105483516001600160a01b039091169084906000906112d057fe5b6001600160a01b0392831660209182029290920101526011548451911690849060019081106112fb57fe5b6001600160a01b03928316602091820292909201015260125484519116908490600290811061132657fe5b6001600160a01b039092166020928302919091019091015261135783611352848463ffffffff6120c016565b6122c1565b505b61136161248c565b5050565b620186a081565b6006546000906001600160a01b031633146113bc576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6004546001600160a01b0383811691161415611408576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561144e57600080fd5b505afa158015611462573d6000803e3d6000fd5b505050506040513d602081101561147857600080fd5b505160065490915061149d906001600160a01b0384811691168363ffffffff61226a16565b919050565b60035481565b6005546001600160a01b03163314806114cb57506007546001600160a01b031633145b61150d576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6001600160a01b03166000908152600e60205260409020805460ff19166001179055565b60005481565b6005546001600160a01b031681565b600a546001600160a01b031681565b600d546001600160a01b031681565b6000611585611571610ae5565b611579611c8a565b9063ffffffff61217516565b905090565b6008546001600160a01b031633146115d5576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600255565b6006546000906001600160a01b0316331461162a576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611632612752565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561167e57600080fd5b505afa158015611692573d6000803e3d6000fd5b505050506040513d60208110156116a857600080fd5b50516006546004805460408051632988bb9f60e21b81526001600160a01b03928316938101939093525193945060009392169163a622ee7c91602480820192602092909190829003018186803b15801561170157600080fd5b505afa158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b505190506001600160a01b038116611773576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b600454611790906001600160a01b0316828463ffffffff61226a16565b5090565b600e6020526000908152604090205460ff1681565b60015481565b60025481565b6014546001600160a01b031681565b6008546001600160a01b0316331461180f576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60008061183c61275d565b9050670de0b6b3a7640000811115611858576000915050610ae2565b600a54600b54604080516370a0823160e01b81526001600160a01b03928316600482015290516119569392909216916370a0823191602480820192602092909190829003018186803b1580156118ad57600080fd5b505afa1580156118c1573d6000803e3d6000fd5b505050506040513d60208110156118d757600080fd5b5051600a54604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b15801561191e57600080fd5b505afa158015611932573d6000803e3d6000fd5b505050506040513d602081101561194857600080fd5b50519063ffffffff6120c016565b60095460408051631c845d8560e31b81529051611a18926001600160a01b03169163e422ec28916004808301926020929190829003018186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d60208110156119c657600080fd5b505160048054600954604080516370a0823160e01b81526001600160a01b0392831694810194909452519116916370a08231916024808301926020929190829003018186803b15801561191e57600080fd5b1115611a28576000915050610ae2565b611a56600a610e636003611a4a670de0b6b3a76400008663ffffffff6120c016565b9063ffffffff6121cf16565b91505090565b6008546001600160a01b03163314611aa7576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b601355565b600f546001600160a01b031681565b73d4405f0704621dbe9d4dea60e128e0c3b26bddbd81565b6005546001600160a01b03163314611b20576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314611b8d576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600355565b6008546001600160a01b03163314611bdd576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600c546001600160a01b031681565b6008546001600160a01b03163314611c59576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031681565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610ab357600080fd5b6006546000906001600160a01b03163314611d29576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611d328261210b565b5060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611d7f57600080fd5b505afa158015611d93573d6000803e3d6000fd5b505050506040513d6020811015611da957600080fd5b50516006546004805460408051632988bb9f60e21b81526001600160a01b03928316938101939093525193945060009392169163a622ee7c91602480820192602092909190829003018186803b158015611e0257600080fd5b505afa158015611e16573d6000803e3d6000fd5b505050506040513d6020811015611e2c57600080fd5b505190506001600160a01b038116611e74576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b600454611e91906001600160a01b0316828463ffffffff61226a16565b50919050565b6008546001600160a01b03163314611ee2576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600155565b6005546001600160a01b03163314611f34576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015611fa557600080fd5b505afa158015611fb9573d6000803e3d6000fd5b505050506040513d6020811015611fcf57600080fd5b50519050801561208157600f54600454611ffd916001600160a01b039182169116600063ffffffff61281e16565b600f54600454612020916001600160a01b0391821691168363ffffffff61281e16565b600f546040805163534a7e1d60e11b81526004810184905290516001600160a01b039092169163a694fc3a9160248082019260009290919082900301818387803b15801561206d57600080fd5b505af115801561107c573d6000803e3d6000fd5b50565b6012546001600160a01b031681565b6008546001600160a01b031681565b6011546001600160a01b031681565b6006546001600160a01b031681565b600061210283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612931565b90505b92915050565b600f5460408051632e1a7d4d60e01b81526004810184905290516000926001600160a01b031691632e1a7d4d916024808301928692919082900301818387803b15801561215757600080fd5b505af115801561216b573d6000803e3d6000fd5b5093949350505050565b600082820183811015612102576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826121de57506000612105565b828202828482816121eb57fe5b04146121025760405162461bcd60e51b8152600401808060200182810382526021815260200180612c696021913960400191505060405180910390fd5b600061210283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506129c8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526122bc908490612a2d565b505050565b60006001600160a01b0316826001815181106122d957fe5b60200260200101516001600160a01b031614156122f557600080fd5b600c546001600160a01b03166338ed1739826000853061231c42603c63ffffffff61217516565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561239557818101518382015260200161237d565b505050509050019650505050505050600060405180830381600087803b1580156123be57600080fd5b505af11580156123d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156123fb57600080fd5b810190808051604051939291908464010000000082111561241b57600080fd5b90830190602082018581111561243057600080fd5b825186602082028301116401000000008211171561244d57600080fd5b82525081516020918201928201910280838360005b8381101561247a578181015183820152602001612462565b50505050905001604052505050505050565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156124db57600080fd5b505afa1580156124ef573d6000803e3d6000fd5b505050506040513d602081101561250557600080fd5b50519050801561208157600654604080516361d027b360e01b8152905161259d926001600160a01b0316916361d027b3916004808301926020929190829003018186803b15801561255557600080fd5b505afa158015612569573d6000803e3d6000fd5b505050506040513d602081101561257f57600080fd5b50516000546110639061271090610e6390869063ffffffff6121cf16565b60065460408051638d8f1e6760e01b8152905161262b926001600160a01b031691638d8f1e67916004808301926020929190829003018186803b1580156125e357600080fd5b505afa1580156125f7573d6000803e3d6000fd5b505050506040513d602081101561260d57600080fd5b50516001546110639061271090610e6390869063ffffffff6121cf16565b6004546009546001600160a01b039182169163095ea7b3911661265c61264f611831565b859063ffffffff6121cf16565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156126ab57600080fd5b505af11580156126bf573d6000803e3d6000fd5b505050506040513d60208110156126d557600080fd5b50506009546001600160a01b031663eca34d2460016126f561264f611831565b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561273257600080fd5b505af1158015612746573d6000803e3d6000fd5b50505050612081611f56565b612081610e2b610ae5565b600080600073d4405f0704621dbe9d4dea60e128e0c3b26bddbd6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156127af57600080fd5b505afa1580156127c3573d6000803e3d6000fd5b505050506040513d60608110156127d957600080fd5b50805160209091015190925090506128176dffffffffffffffffffffffffffff80841690610e63908416670de0b6b3a764000063ffffffff6121cf16565b9250505090565b8015806128a4575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561287657600080fd5b505afa15801561288a573d6000803e3d6000fd5b505050506040513d60208110156128a057600080fd5b5051155b6128df5760405162461bcd60e51b8152600401808060200182810382526036815260200180612cb46036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526122bc908490612a2d565b600081848411156129c05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561298557818101518382015260200161296d565b50505050905090810190601f1680156129b25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612a175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561298557818101518382015260200161296d565b506000838581612a2357fe5b0495945050505050565b6060612a82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ade9092919063ffffffff16565b8051909150156122bc57808060200190516020811015612aa157600080fd5b50516122bc5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c8a602a913960400191505060405180910390fd5b6060612aed8484600085612af5565b949350505050565b6060612b0085612c62565b612b51576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612b905780518252601f199092019160209182019101612b71565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612bf2576040519150601f19603f3d011682016040523d82523d6000602084013e612bf7565b606091505b50915091508115612c0b579150612aed9050565b805115612c1b5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561298557818101518382015260200161296d565b3b15159056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220c28aa9a4f67a888004c432de17c02a996f3f4c5ada0f78dcf1f1440c111c078464736f6c63430006070033",
  "deployedBytecode": "0x6080604052600436106103355760003560e01c806382378594116101ab578063aced73bd116100f7578063c7b9d53011610095578063d33219b41161006f578063d33219b414610a25578063f4b9fa7514610a3a578063f77c479114610a4f578063fe1f8f7a1461061857610335565b8063c7b9d530146109c8578063d0e30db0146109fb578063d21220a714610a1057610335565b8063be040fb0116100d1578063be040fb01461094a578063c1a3d44c1461095f578063c6223e2614610974578063c65e32421461099e57610335565b8063aced73bd146108cf578063b9e3748914610902578063bdacb3031461091757610335565b806392eefe9b116101645780639ec5a8941161013e5780639ec5a89414610848578063a8aa1b311461085d578063ab033ea914610872578063ab73e433146108a557610335565b806392eefe9b146107d6578063965fa21e146108095780639b26a4841461081e57610335565b80638237859414610711578063853828b61461073b578063879765831461075057806388993f22146107975780638ccdbb70146107ac5780638ee624a9146107c157610335565b80633656b20b1161028557806351f3d0b8116102235780635aa6e675116101fd5780635aa6e675146106bd57806364c9ec6f146106d25780636d13582c146106e7578063722713f7146106fc57610335565b806351f3d0b81461066057806354df7b631461067557806359739ec4146106a857610335565b80634641257d1161025f5780634641257d14610603578063479119be146106185780634fe809cc1461058557806351cff8d91461062d57610335565b80633656b20b146105855780633fc8cef3146105d957806344df8e70146105ee57610335565b80631f1fcd51116102f257806325802756116102cc578063258027561461057057806326e886c6146105855780632e1a7d4d1461059a57806332ac1f27146105c457610335565b80631f1fcd51146105005780631fe4a68614610531578063249fb9b41461054657610335565b806304d152eb1461033a5780630547104d14610361578063115880861461037657806317d7de7c1461038b57806318eb0e0b146104155780631cff79cd1461044a575b600080fd5b34801561034657600080fd5b5061034f610a64565b60408051918252519081900360200190f35b34801561036d57600080fd5b5061034f610a6a565b34801561038257600080fd5b5061034f610ae5565b34801561039757600080fd5b506103a0610b30565b6040805160208082528351818301528351919283929083019185019080838360005b838110156103da5781810151838201526020016103c2565b50505050905090810190601f1680156104075780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561042157600080fd5b506104486004803603602081101561043857600080fd5b50356001600160a01b0316610b5a565b005b6103a06004803603604081101561046057600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561048b57600080fd5b82018360208201111561049d57600080fd5b803590602001918460018302840111640100000000831117156104bf57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610be0945050505050565b34801561050c57600080fd5b50610515610cc3565b604080516001600160a01b039092168252519081900360200190f35b34801561053d57600080fd5b50610515610cd2565b34801561055257600080fd5b506104486004803603602081101561056957600080fd5b5035610ce1565b34801561057c57600080fd5b50610515610d31565b34801561059157600080fd5b5061034f610d40565b3480156105a657600080fd5b50610448600480360360208110156105bd57600080fd5b5035610d46565b3480156105d057600080fd5b50610515611083565b3480156105e557600080fd5b50610515611092565b3480156105fa57600080fd5b506105156110aa565b34801561060f57600080fd5b506104486110b9565b34801561062457600080fd5b5061034f611365565b34801561063957600080fd5b5061034f6004803603602081101561065057600080fd5b50356001600160a01b031661136c565b34801561066c57600080fd5b5061034f6114a2565b34801561068157600080fd5b506104486004803603602081101561069857600080fd5b50356001600160a01b03166114a8565b3480156106b457600080fd5b5061034f611531565b3480156106c957600080fd5b50610515611537565b3480156106de57600080fd5b50610515611546565b3480156106f357600080fd5b50610515611555565b34801561070857600080fd5b5061034f611564565b34801561071d57600080fd5b506104486004803603602081101561073457600080fd5b503561158a565b34801561074757600080fd5b5061034f6115da565b34801561075c57600080fd5b506107836004803603602081101561077357600080fd5b50356001600160a01b0316611794565b604080519115158252519081900360200190f35b3480156107a357600080fd5b5061034f6117a9565b3480156107b857600080fd5b5061034f6117af565b3480156107cd57600080fd5b506105156117b5565b3480156107e257600080fd5b50610448600480360360208110156107f957600080fd5b50356001600160a01b03166117c4565b34801561081557600080fd5b5061034f611831565b34801561082a57600080fd5b506104486004803603602081101561084157600080fd5b5035611a5c565b34801561085457600080fd5b50610515611aac565b34801561086957600080fd5b50610515611abb565b34801561087e57600080fd5b506104486004803603602081101561089557600080fd5b50356001600160a01b0316611ad3565b3480156108b157600080fd5b50610448600480360360208110156108c857600080fd5b5035611b42565b3480156108db57600080fd5b50610448600480360360208110156108f257600080fd5b50356001600160a01b0316611b92565b34801561090e57600080fd5b50610515611bff565b34801561092357600080fd5b506104486004803603602081101561093a57600080fd5b50356001600160a01b0316611c0e565b34801561095657600080fd5b50610515611c7b565b34801561096b57600080fd5b5061034f611c8a565b34801561098057600080fd5b5061034f6004803603602081101561099757600080fd5b5035611cd9565b3480156109aa57600080fd5b50610448600480360360208110156109c157600080fd5b5035611e97565b3480156109d457600080fd5b50610448600480360360208110156109eb57600080fd5b50356001600160a01b0316611ee7565b348015610a0757600080fd5b50610448611f56565b348015610a1c57600080fd5b50610515612084565b348015610a3157600080fd5b50610515612093565b348015610a4657600080fd5b506105156120a2565b348015610a5b57600080fd5b506105156120b1565b60135481565b600f54604080516246613160e11b815230600482015290516000926001600160a01b031691628cc262916024808301926020929190829003018186803b158015610ab357600080fd5b505afa158015610ac7573d6000803e3d6000fd5b505050506040513d6020811015610add57600080fd5b505190505b90565b600f54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015610ab357600080fd5b60408051808201909152601081526f5374726174656779426173697342616360801b602082015290565b6005546001600160a01b0316331480610b7d57506007546001600160a01b031633145b610bbf576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6001600160a01b03166000908152600e60205260409020805460ff19169055565b6008546060906001600160a01b03163314610c2e576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b6001600160a01b038316610c73576040805162461bcd60e51b8152602060048201526007602482015266085d185c99d95d60ca1b604482015290519081900360640190fd5b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018114610cb357610cba565b8160208501fd5b50505092915050565b6004546001600160a01b031681565b6007546001600160a01b031681565b6008546001600160a01b03163314610d2c576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600055565b6010546001600160a01b031681565b61271081565b6006546001600160a01b03163314610d93576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610de257600080fd5b505afa158015610df6573d6000803e3d6000fd5b505050506040513d6020811015610e0c57600080fd5b5051905081811015610e4557610e30610e2b838363ffffffff6120c016565b61210b565b9150610e42828263ffffffff61217516565b91505b6000610e6f620186a0610e63600354866121cf90919063ffffffff16565b9063ffffffff61222816565b9050610f07600660009054906101000a90046001600160a01b03166001600160a01b0316638d8f1e676040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec257600080fd5b505afa158015610ed6573d6000803e3d6000fd5b505050506040513d6020811015610eec57600080fd5b50516004546001600160a01b0316908363ffffffff61226a16565b6000610f25620186a0610e63600254876121cf90919063ffffffff16565b9050610f78600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b158015610ec257600080fd5b6006546004805460408051632988bb9f60e21b81526001600160a01b039283169381019390935251600093919091169163a622ee7c916024808301926020929190829003018186803b158015610fcd57600080fd5b505afa158015610fe1573d6000803e3d6000fd5b505050506040513d6020811015610ff757600080fd5b505190506001600160a01b03811661103f576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b61107c8161106384611057898863ffffffff6120c016565b9063ffffffff6120c016565b6004546001600160a01b0316919063ffffffff61226a16565b5050505050565b6015546001600160a01b031681565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b600b546001600160a01b031681565b336000908152600e602052604090205460ff16806110e157506005546001600160a01b031633145b806110f657506007546001600160a01b031633145b6110ff57600080fd5b604080516003808252608082019092526060916020820183803683375050600f5460408051631e8c5c8960e11b815290519394506001600160a01b0390911692633d18b9129250600480830192600092919082900301818387803b15801561116657600080fd5b505af115801561117a573d6000803e3d6000fd5b5050601054604080516370a0823160e01b81523060048201529051600094506001600160a01b0390921692506370a08231916024808301926020929190829003018186803b1580156111cb57600080fd5b505afa1580156111df573d6000803e3d6000fd5b505050506040513d60208110156111f557600080fd5b50519050801561135957600061121c612710610e63601354856121cf90919063ffffffff16565b90506112b4600660009054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561126f57600080fd5b505afa158015611283573d6000803e3d6000fd5b505050506040513d602081101561129957600080fd5b50516010546001600160a01b0316908363ffffffff61226a16565b60105483516001600160a01b039091169084906000906112d057fe5b6001600160a01b0392831660209182029290920101526011548451911690849060019081106112fb57fe5b6001600160a01b03928316602091820292909201015260125484519116908490600290811061132657fe5b6001600160a01b039092166020928302919091019091015261135783611352848463ffffffff6120c016565b6122c1565b505b61136161248c565b5050565b620186a081565b6006546000906001600160a01b031633146113bc576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b6004546001600160a01b0383811691161415611408576040805162461bcd60e51b815260206004808301919091526024820152631dd85b9d60e21b604482015290519081900360640190fd5b604080516370a0823160e01b815230600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561144e57600080fd5b505afa158015611462573d6000803e3d6000fd5b505050506040513d602081101561147857600080fd5b505160065490915061149d906001600160a01b0384811691168363ffffffff61226a16565b919050565b60035481565b6005546001600160a01b03163314806114cb57506007546001600160a01b031633145b61150d576040805162461bcd60e51b815260206004820152600e60248201526d1b9bdd08185d5d1a1bdc9a5e995960921b604482015290519081900360640190fd5b6001600160a01b03166000908152600e60205260409020805460ff19166001179055565b60005481565b6005546001600160a01b031681565b600a546001600160a01b031681565b600d546001600160a01b031681565b6000611585611571610ae5565b611579611c8a565b9063ffffffff61217516565b905090565b6008546001600160a01b031633146115d5576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600255565b6006546000906001600160a01b0316331461162a576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611632612752565b60048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b15801561167e57600080fd5b505afa158015611692573d6000803e3d6000fd5b505050506040513d60208110156116a857600080fd5b50516006546004805460408051632988bb9f60e21b81526001600160a01b03928316938101939093525193945060009392169163a622ee7c91602480820192602092909190829003018186803b15801561170157600080fd5b505afa158015611715573d6000803e3d6000fd5b505050506040513d602081101561172b57600080fd5b505190506001600160a01b038116611773576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b600454611790906001600160a01b0316828463ffffffff61226a16565b5090565b600e6020526000908152604090205460ff1681565b60015481565b60025481565b6014546001600160a01b031681565b6008546001600160a01b0316331461180f576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b60008061183c61275d565b9050670de0b6b3a7640000811115611858576000915050610ae2565b600a54600b54604080516370a0823160e01b81526001600160a01b03928316600482015290516119569392909216916370a0823191602480820192602092909190829003018186803b1580156118ad57600080fd5b505afa1580156118c1573d6000803e3d6000fd5b505050506040513d60208110156118d757600080fd5b5051600a54604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b15801561191e57600080fd5b505afa158015611932573d6000803e3d6000fd5b505050506040513d602081101561194857600080fd5b50519063ffffffff6120c016565b60095460408051631c845d8560e31b81529051611a18926001600160a01b03169163e422ec28916004808301926020929190829003018186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d60208110156119c657600080fd5b505160048054600954604080516370a0823160e01b81526001600160a01b0392831694810194909452519116916370a08231916024808301926020929190829003018186803b15801561191e57600080fd5b1115611a28576000915050610ae2565b611a56600a610e636003611a4a670de0b6b3a76400008663ffffffff6120c016565b9063ffffffff6121cf16565b91505090565b6008546001600160a01b03163314611aa7576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b601355565b600f546001600160a01b031681565b73d4405f0704621dbe9d4dea60e128e0c3b26bddbd81565b6005546001600160a01b03163314611b20576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314611b8d576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600355565b6008546001600160a01b03163314611bdd576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b600c546001600160a01b031681565b6008546001600160a01b03163314611c59576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b031681565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015610ab357600080fd5b6006546000906001600160a01b03163314611d29576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b611d328261210b565b5060048054604080516370a0823160e01b81523093810193909352516001600160a01b03909116916370a08231916024808301926020929190829003018186803b158015611d7f57600080fd5b505afa158015611d93573d6000803e3d6000fd5b505050506040513d6020811015611da957600080fd5b50516006546004805460408051632988bb9f60e21b81526001600160a01b03928316938101939093525193945060009392169163a622ee7c91602480820192602092909190829003018186803b158015611e0257600080fd5b505afa158015611e16573d6000803e3d6000fd5b505050506040513d6020811015611e2c57600080fd5b505190506001600160a01b038116611e74576040805162461bcd60e51b8152602060048201526006602482015265085d985d5b1d60d21b604482015290519081900360640190fd5b600454611e91906001600160a01b0316828463ffffffff61226a16565b50919050565b6008546001600160a01b03163314611ee2576040805162461bcd60e51b81526020600482015260096024820152682174696d656c6f636b60b81b604482015290519081900360640190fd5b600155565b6005546001600160a01b03163314611f34576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b158015611fa557600080fd5b505afa158015611fb9573d6000803e3d6000fd5b505050506040513d6020811015611fcf57600080fd5b50519050801561208157600f54600454611ffd916001600160a01b039182169116600063ffffffff61281e16565b600f54600454612020916001600160a01b0391821691168363ffffffff61281e16565b600f546040805163534a7e1d60e11b81526004810184905290516001600160a01b039092169163a694fc3a9160248082019260009290919082900301818387803b15801561206d57600080fd5b505af115801561107c573d6000803e3d6000fd5b50565b6012546001600160a01b031681565b6008546001600160a01b031681565b6011546001600160a01b031681565b6006546001600160a01b031681565b600061210283836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612931565b90505b92915050565b600f5460408051632e1a7d4d60e01b81526004810184905290516000926001600160a01b031691632e1a7d4d916024808301928692919082900301818387803b15801561215757600080fd5b505af115801561216b573d6000803e3d6000fd5b5093949350505050565b600082820183811015612102576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b6000826121de57506000612105565b828202828482816121eb57fe5b04146121025760405162461bcd60e51b8152600401808060200182810382526021815260200180612c696021913960400191505060405180910390fd5b600061210283836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506129c8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526122bc908490612a2d565b505050565b60006001600160a01b0316826001815181106122d957fe5b60200260200101516001600160a01b031614156122f557600080fd5b600c546001600160a01b03166338ed1739826000853061231c42603c63ffffffff61217516565b6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03166001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561239557818101518382015260200161237d565b505050509050019650505050505050600060405180830381600087803b1580156123be57600080fd5b505af11580156123d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156123fb57600080fd5b810190808051604051939291908464010000000082111561241b57600080fd5b90830190602082018581111561243057600080fd5b825186602082028301116401000000008211171561244d57600080fd5b82525081516020918201928201910280838360005b8381101561247a578181015183820152602001612462565b50505050905001604052505050505050565b60048054604080516370a0823160e01b81523093810193909352516000926001600160a01b03909216916370a08231916024808301926020929190829003018186803b1580156124db57600080fd5b505afa1580156124ef573d6000803e3d6000fd5b505050506040513d602081101561250557600080fd5b50519050801561208157600654604080516361d027b360e01b8152905161259d926001600160a01b0316916361d027b3916004808301926020929190829003018186803b15801561255557600080fd5b505afa158015612569573d6000803e3d6000fd5b505050506040513d602081101561257f57600080fd5b50516000546110639061271090610e6390869063ffffffff6121cf16565b60065460408051638d8f1e6760e01b8152905161262b926001600160a01b031691638d8f1e67916004808301926020929190829003018186803b1580156125e357600080fd5b505afa1580156125f7573d6000803e3d6000fd5b505050506040513d602081101561260d57600080fd5b50516001546110639061271090610e6390869063ffffffff6121cf16565b6004546009546001600160a01b039182169163095ea7b3911661265c61264f611831565b859063ffffffff6121cf16565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156126ab57600080fd5b505af11580156126bf573d6000803e3d6000fd5b505050506040513d60208110156126d557600080fd5b50506009546001600160a01b031663eca34d2460016126f561264f611831565b6040518363ffffffff1660e01b81526004018083815260200182815260200192505050600060405180830381600087803b15801561273257600080fd5b505af1158015612746573d6000803e3d6000fd5b50505050612081611f56565b612081610e2b610ae5565b600080600073d4405f0704621dbe9d4dea60e128e0c3b26bddbd6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b1580156127af57600080fd5b505afa1580156127c3573d6000803e3d6000fd5b505050506040513d60608110156127d957600080fd5b50805160209091015190925090506128176dffffffffffffffffffffffffffff80841690610e63908416670de0b6b3a764000063ffffffff6121cf16565b9250505090565b8015806128a4575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561287657600080fd5b505afa15801561288a573d6000803e3d6000fd5b505050506040513d60208110156128a057600080fd5b5051155b6128df5760405162461bcd60e51b8152600401808060200182810382526036815260200180612cb46036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526122bc908490612a2d565b600081848411156129c05760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561298557818101518382015260200161296d565b50505050905090810190601f1680156129b25780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60008183612a175760405162461bcd60e51b815260206004820181815283516024840152835190928392604490910191908501908083836000831561298557818101518382015260200161296d565b506000838581612a2357fe5b0495945050505050565b6060612a82826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612ade9092919063ffffffff16565b8051909150156122bc57808060200190516020811015612aa157600080fd5b50516122bc5760405162461bcd60e51b815260040180806020018281038252602a815260200180612c8a602a913960400191505060405180910390fd5b6060612aed8484600085612af5565b949350505050565b6060612b0085612c62565b612b51576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612b905780518252601f199092019160209182019101612b71565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612bf2576040519150601f19603f3d011682016040523d82523d6000602084013e612bf7565b606091505b50915091508115612c0b579150612aed9050565b805115612c1b5780518082602001fd5b60405162461bcd60e51b815260206004820181815286516024840152865187939192839260440191908501908083836000831561298557818101518382015260200161296d565b3b15159056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220c28aa9a4f67a888004c432de17c02a996f3f4c5ada0f78dcf1f1440c111c078464736f6c63430006070033",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3561,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "performanceTreasuryFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3567,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "performanceDevFee",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3573,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "withdrawalTreasuryFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3579,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "withdrawalDevFundFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3584,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "want",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3592,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "governance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3594,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "controller",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 3596,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "strategist",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3598,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "timelock",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 3600,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "redeem",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 3602,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "bond",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3604,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "burn",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 3607,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "univ2Router2",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 3610,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "sushiRouter",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 3614,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "harvesters",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4832,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "rewards",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 4640,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "bas",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 4643,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "dai",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 4645,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "token1",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 4648,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "keepBAS",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3495,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "staking_pool",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 3498,
        "contract": "src/strategies/basis/strategy-basis-bac.sol:StrategyBasisBac",
        "label": "bac",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}